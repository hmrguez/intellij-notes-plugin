<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/settings.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.gradle.kts" />
              <option name="originalContent" value="rootProject.name = &quot;fastendpointsplugin&quot;" />
              <option name="updatedContent" value="rootProject.name = &quot;notesplugin&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/hmrguez/fastendpointsplugin/notes/CreateNoteAction.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/hmrguez/fastendpointsplugin/notes/CreateNoteAction.kt" />
              <option name="originalContent" value="package hmrguez.fastendpointsplugin.notes&#10;&#10;import com.intellij.openapi.actionSystem.AnAction&#10;import com.intellij.openapi.actionSystem.AnActionEvent&#10;import com.intellij.openapi.components.service&#10;import com.intellij.openapi.project.DumbAware&#10;import com.intellij.openapi.ui.Messages&#10;&#10;class CreateNoteAction : AnAction(), DumbAware {&#10;    override fun actionPerformed(e: AnActionEvent) {&#10;        val project = e.project ?: return&#10;        val notesService = project.service&lt;NotesService&gt;()&#10;&#10;        // Ask for note content&#10;        val text = Messages.showMultilineInputDialog(&#10;            project,&#10;            &quot;Enter your note:&quot;,&#10;            &quot;New Note&quot;,&#10;            &quot;&quot;,&#10;            null,&#10;            null&#10;        )&#10;        if (text.isNullOrBlank()) return&#10;&#10;        val trimmed = text.trim()&#10;        if (trimmed.isEmpty()) return&#10;&#10;        // Create note with no tags; tags can be edited later in the tool window&#10;        notesService.addNote(trimmed)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package hmrguez.notesplugin.notes&#10;&#10;import com.intellij.openapi.actionSystem.AnAction&#10;import com.intellij.openapi.actionSystem.AnActionEvent&#10;import com.intellij.openapi.components.service&#10;import com.intellij.openapi.project.DumbAware&#10;import com.intellij.openapi.ui.Messages&#10;&#10;class CreateNoteAction : AnAction(), DumbAware {&#10;    override fun actionPerformed(e: AnActionEvent) {&#10;        val project = e.project ?: return&#10;        val notesService = project.service&lt;NotesService&gt;()&#10;&#10;        // Ask for note content&#10;        val text = Messages.showMultilineInputDialog(&#10;            project,&#10;            &quot;Enter your note:&quot;,&#10;            &quot;New Note&quot;,&#10;            &quot;&quot;,&#10;            null,&#10;            null&#10;        )&#10;        if (text.isNullOrBlank()) return&#10;&#10;        val trimmed = text.trim()&#10;        if (trimmed.isEmpty()) return&#10;&#10;        // Create note with no tags; tags can be edited later in the tool window&#10;        notesService.addNote(trimmed)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/hmrguez/fastendpointsplugin/notes/NoteCellPanel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/hmrguez/fastendpointsplugin/notes/NoteCellPanel.kt" />
              <option name="originalContent" value="package hmrguez.fastendpointsplugin.notes&#10;&#10;import java.awt.*&#10;import javax.swing.*&#10;import javax.swing.border.EmptyBorder&#10;&#10;class NoteCellPanel(&#10;    private val note: NotesService.Note,&#10;    private val isSelected: Boolean,&#10;    private val hasFocus: Boolean&#10;) : JPanel() {&#10;&#10;    init {&#10;        layout = BorderLayout()&#10;        isOpaque = true&#10;        background = if (isSelected) UIManager.getColor(&quot;List.selectionBackground&quot;) else UIManager.getColor(&quot;List.background&quot;)&#10;&#10;        val contentPanel = JPanel(FlowLayout(FlowLayout.LEFT, 5, 2))&#10;        contentPanel.isOpaque = false&#10;&#10;        // Note content&#10;        val firstLine = note.content.lines().firstOrNull()?.take(80) ?: &quot;(empty)&quot;&#10;        val contentLabel = JLabel(firstLine)&#10;        contentLabel.font = contentLabel.font.deriveFont(Font.BOLD)&#10;        contentLabel.foreground = if (isSelected) UIManager.getColor(&quot;List.selectionForeground&quot;) else UIManager.getColor(&quot;List.foreground&quot;)&#10;        contentPanel.add(contentLabel)&#10;&#10;        // Add tags directly to the same panel&#10;        if (note.tags.isNotEmpty()) {&#10;            val order = NotesService.AVAILABLE_TAGS.withIndex().associate { it.value to it.index }&#10;            val sortedTags = note.tags.sortedWith(compareBy({ order[it] ?: Int.MAX_VALUE }, { it }))&#10;&#10;            sortedTags.forEach { tag -&gt;&#10;                contentPanel.add(createChip(tag))&#10;            }&#10;        }&#10;&#10;        add(contentPanel, BorderLayout.WEST)&#10;        border = if (hasFocus) UIManager.getBorder(&quot;List.focusCellHighlightBorder&quot;) else EmptyBorder(2, 5, 2, 5)&#10;    }&#10;&#10;    private fun createTagsPanel(): JPanel {&#10;        val panel = JPanel(FlowLayout(FlowLayout.LEFT, 2, 0))&#10;        panel.isOpaque = false&#10;&#10;        val order = NotesService.AVAILABLE_TAGS.withIndex().associate { it.value to it.index }&#10;        val sortedTags = note.tags.sortedWith(compareBy({ order[it] ?: Int.MAX_VALUE }, { it }))&#10;&#10;        sortedTags.forEach { tag -&gt;&#10;            panel.add(createChip(tag))&#10;        }&#10;&#10;        return panel&#10;    }&#10;&#10;    private fun createChip(tag: String): JComponent {&#10;        return object : JComponent() {&#10;            override fun getPreferredSize(): Dimension {&#10;                val metrics = getFontMetrics(font ?: UIManager.getFont(&quot;Label.font&quot;))&#10;                val width = metrics.stringWidth(tag) + 16&#10;                val height = metrics.height + 4&#10;                return Dimension(width, height)&#10;            }&#10;&#10;            override fun getMinimumSize(): Dimension = preferredSize&#10;            override fun getMaximumSize(): Dimension = preferredSize&#10;&#10;            override fun paintComponent(g: Graphics) {&#10;                val g2d = g as Graphics2D&#10;                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)&#10;&#10;                val color = getTagColor(tag)&#10;&#10;                // Draw chip background&#10;                g2d.color = color&#10;                g2d.fillRoundRect(0, 0, width, height, height, height)&#10;&#10;                // Draw text&#10;                g2d.color = Color.WHITE&#10;                val metrics = g2d.fontMetrics&#10;                val x = (width - metrics.stringWidth(tag)) / 2&#10;                val y = (height + metrics.ascent - metrics.descent) / 2&#10;                g2d.drawString(tag, x, y)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getTagColor(tag: String): Color {&#10;        return when (tag.lowercase()) {&#10;            &quot;todo&quot; -&gt; Color(9, 105, 218)     // #0969da&#10;            &quot;mental&quot; -&gt; Color(130, 80, 223)   // #8250df&#10;            &quot;giberish&quot; -&gt; Color(154, 103, 0)  // #9a6700&#10;            else -&gt; Color(87, 96, 106)        // #57606a&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package hmrguez.notesplugin.notes&#10;&#10;import java.awt.*&#10;import javax.swing.*&#10;import javax.swing.border.EmptyBorder&#10;&#10;class NoteCellPanel(&#10;    private val note: NotesService.Note,&#10;    private val isSelected: Boolean,&#10;    private val hasFocus: Boolean&#10;) : JPanel() {&#10;&#10;    init {&#10;        layout = BorderLayout()&#10;        isOpaque = true&#10;        background = if (isSelected) UIManager.getColor(&quot;List.selectionBackground&quot;) else UIManager.getColor(&quot;List.background&quot;)&#10;&#10;        val contentPanel = JPanel(FlowLayout(FlowLayout.LEFT, 5, 2))&#10;        contentPanel.isOpaque = false&#10;&#10;        // Note content&#10;        val firstLine = note.content.lines().firstOrNull()?.take(80) ?: &quot;(empty)&quot;&#10;        val contentLabel = JLabel(firstLine)&#10;        contentLabel.font = contentLabel.font.deriveFont(Font.BOLD)&#10;        contentLabel.foreground = if (isSelected) UIManager.getColor(&quot;List.selectionForeground&quot;) else UIManager.getColor(&quot;List.foreground&quot;)&#10;        contentPanel.add(contentLabel)&#10;&#10;        // Add tags directly to the same panel&#10;        if (note.tags.isNotEmpty()) {&#10;            val order = NotesService.AVAILABLE_TAGS.withIndex().associate { it.value to it.index }&#10;            val sortedTags = note.tags.sortedWith(compareBy({ order[it] ?: Int.MAX_VALUE }, { it }))&#10;&#10;            sortedTags.forEach { tag -&gt;&#10;                contentPanel.add(createChip(tag))&#10;            }&#10;        }&#10;&#10;        add(contentPanel, BorderLayout.WEST)&#10;        border = if (hasFocus) UIManager.getBorder(&quot;List.focusCellHighlightBorder&quot;) else EmptyBorder(2, 5, 2, 5)&#10;    }&#10;&#10;    private fun createTagsPanel(): JPanel {&#10;        val panel = JPanel(FlowLayout(FlowLayout.LEFT, 2, 0))&#10;        panel.isOpaque = false&#10;&#10;        val order = NotesService.AVAILABLE_TAGS.withIndex().associate { it.value to it.index }&#10;        val sortedTags = note.tags.sortedWith(compareBy({ order[it] ?: Int.MAX_VALUE }, { it }))&#10;&#10;        sortedTags.forEach { tag -&gt;&#10;            panel.add(createChip(tag))&#10;        }&#10;&#10;        return panel&#10;    }&#10;&#10;    private fun createChip(tag: String): JComponent {&#10;        return object : JComponent() {&#10;            override fun getPreferredSize(): Dimension {&#10;                val metrics = getFontMetrics(font ?: UIManager.getFont(&quot;Label.font&quot;))&#10;                val width = metrics.stringWidth(tag) + 16&#10;                val height = metrics.height + 4&#10;                return Dimension(width, height)&#10;            }&#10;&#10;            override fun getMinimumSize(): Dimension = preferredSize&#10;            override fun getMaximumSize(): Dimension = preferredSize&#10;&#10;            override fun paintComponent(g: Graphics) {&#10;                val g2d = g as Graphics2D&#10;                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)&#10;&#10;                val color = getTagColor(tag)&#10;&#10;                // Draw chip background&#10;                g2d.color = color&#10;                g2d.fillRoundRect(0, 0, width, height, height, height)&#10;&#10;                // Draw text&#10;                g2d.color = Color.WHITE&#10;                val metrics = g2d.fontMetrics&#10;                val x = (width - metrics.stringWidth(tag)) / 2&#10;                val y = (height + metrics.ascent - metrics.descent) / 2&#10;                g2d.drawString(tag, x, y)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getTagColor(tag: String): Color {&#10;        return when (tag.lowercase()) {&#10;            &quot;todo&quot; -&gt; Color(9, 105, 218)     // #0969da&#10;            &quot;mental&quot; -&gt; Color(130, 80, 223)   // #8250df&#10;            &quot;giberish&quot; -&gt; Color(154, 103, 0)  // #9a6700&#10;            else -&gt; Color(87, 96, 106)        // #57606a&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/hmrguez/fastendpointsplugin/notes/NotesService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/hmrguez/fastendpointsplugin/notes/NotesService.kt" />
              <option name="originalContent" value="package hmrguez.fastendpointsplugin.notes&#10;&#10;import com.intellij.openapi.components.PersistentStateComponent&#10;import com.intellij.openapi.components.Service&#10;import com.intellij.openapi.components.State&#10;import com.intellij.openapi.components.Storage&#10;import com.intellij.openapi.project.Project&#10;import com.intellij.util.messages.Topic&#10;import java.time.Instant&#10;import java.util.UUID&#10;&#10;@State(name = &quot;NotesService&quot;, storages = [Storage(&quot;notes.xml&quot;)])&#10;@Service(Service.Level.PROJECT)&#10;class NotesService(private val project: Project) : PersistentStateComponent&lt;NotesService.State&gt; {&#10;    interface NotesListener {&#10;        fun notesChanged()&#10;    }&#10;&#10;    companion object {&#10;        val AVAILABLE_TAGS: MutableList&lt;String&gt; = mutableListOf(&quot;todo&quot;, &quot;mental&quot;, &quot;giberish&quot;)&#10;        val TOPIC: Topic&lt;NotesListener&gt; = Topic.create(&quot;Notes changes&quot;, NotesListener::class.java)&#10;    }&#10;&#10;    data class Note(&#10;        var id: String = UUID.randomUUID().toString(),&#10;        var content: String = &quot;&quot;,&#10;        var createdAtEpochSeconds: Long = Instant.now().epochSecond,&#10;        var tags: MutableSet&lt;String&gt; = mutableSetOf()&#10;    )&#10;&#10;    class State {&#10;        var notes: MutableList&lt;Note&gt; = mutableListOf()&#10;        var availableTags: MutableList&lt;String&gt; = mutableListOf(&quot;todo&quot;, &quot;mental&quot;, &quot;giberish&quot;)&#10;    }&#10;&#10;    private var state = State()&#10;&#10;    override fun getState(): State = state&#10;&#10;    override fun loadState(state: State) {&#10;        this.state = state&#10;        // Sync available tags with the loaded state&#10;        AVAILABLE_TAGS.clear()&#10;        AVAILABLE_TAGS.addAll(state.availableTags)&#10;    }&#10;&#10;    fun allNotes(): List&lt;Note&gt; = state.notes.toList()&#10;&#10;    fun addNote(content: String, tags: Set&lt;String&gt; = emptySet()): Note {&#10;        val normalized = tags.map { it.lowercase() }.filter { AVAILABLE_TAGS.contains(it) }.toSet()&#10;        val note = Note(content = content, tags = normalized.toMutableSet())&#10;        state.notes.add(0, note) // newest first&#10;        project.messageBus.syncPublisher(TOPIC).notesChanged()&#10;        return note&#10;    }&#10;&#10;    fun updateNoteTags(id: String, tags: Set&lt;String&gt;) {&#10;        val normalized = tags.map { it.lowercase() }.filter { AVAILABLE_TAGS.contains(it) }.toSet()&#10;        state.notes.firstOrNull { it.id == id }?.let {&#10;            it.tags = normalized.toMutableSet()&#10;            project.messageBus.syncPublisher(TOPIC).notesChanged()&#10;        }&#10;    }&#10;&#10;    fun updateNoteContent(id: String, content: String) {&#10;        state.notes.firstOrNull { it.id == id }?.let {&#10;            it.content = content.trim()&#10;            project.messageBus.syncPublisher(TOPIC).notesChanged()&#10;        }&#10;    }&#10;&#10;    fun deleteNote(id: String) {&#10;        val noteIndex = state.notes.indexOfFirst { it.id == id }&#10;        if (noteIndex != -1) {&#10;            state.notes.removeAt(noteIndex)&#10;            project.messageBus.syncPublisher(TOPIC).notesChanged()&#10;        }&#10;    }&#10;&#10;    fun addAvailableTag(tag: String): Boolean {&#10;        val normalized = tag.trim().lowercase()&#10;        if (normalized.isNotEmpty() &amp;&amp; !AVAILABLE_TAGS.contains(normalized)) {&#10;            AVAILABLE_TAGS.add(normalized)&#10;            state.availableTags.add(normalized)&#10;            project.messageBus.syncPublisher(TOPIC).notesChanged()&#10;            return true&#10;        }&#10;        return false&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package hmrguez.notesplugin.notes&#10;&#10;import com.intellij.openapi.components.PersistentStateComponent&#10;import com.intellij.openapi.components.Service&#10;import com.intellij.openapi.components.State&#10;import com.intellij.openapi.components.Storage&#10;import com.intellij.openapi.project.Project&#10;import com.intellij.util.messages.Topic&#10;import java.time.Instant&#10;import java.util.UUID&#10;&#10;@State(name = &quot;NotesService&quot;, storages = [Storage(&quot;notes.xml&quot;)])&#10;@Service(Service.Level.PROJECT)&#10;class NotesService(private val project: Project) : PersistentStateComponent&lt;NotesService.State&gt; {&#10;    interface NotesListener {&#10;        fun notesChanged()&#10;    }&#10;&#10;    companion object {&#10;        val AVAILABLE_TAGS: MutableList&lt;String&gt; = mutableListOf(&quot;todo&quot;, &quot;mental&quot;, &quot;giberish&quot;)&#10;        val TOPIC: Topic&lt;NotesListener&gt; = Topic.create(&quot;Notes changes&quot;, NotesListener::class.java)&#10;    }&#10;&#10;    data class Note(&#10;        var id: String = UUID.randomUUID().toString(),&#10;        var content: String = &quot;&quot;,&#10;        var createdAtEpochSeconds: Long = Instant.now().epochSecond,&#10;        var tags: MutableSet&lt;String&gt; = mutableSetOf()&#10;    )&#10;&#10;    class State {&#10;        var notes: MutableList&lt;Note&gt; = mutableListOf()&#10;        var availableTags: MutableList&lt;String&gt; = mutableListOf(&quot;todo&quot;, &quot;mental&quot;, &quot;giberish&quot;)&#10;    }&#10;&#10;    private var state = State()&#10;&#10;    override fun getState(): State = state&#10;&#10;    override fun loadState(state: State) {&#10;        this.state = state&#10;        // Sync available tags with the loaded state&#10;        AVAILABLE_TAGS.clear()&#10;        AVAILABLE_TAGS.addAll(state.availableTags)&#10;    }&#10;&#10;    fun allNotes(): List&lt;Note&gt; = state.notes.toList()&#10;&#10;    fun addNote(content: String, tags: Set&lt;String&gt; = emptySet()): Note {&#10;        val normalized = tags.map { it.lowercase() }.filter { AVAILABLE_TAGS.contains(it) }.toSet()&#10;        val note = Note(content = content, tags = normalized.toMutableSet())&#10;        state.notes.add(0, note) // newest first&#10;        project.messageBus.syncPublisher(TOPIC).notesChanged()&#10;        return note&#10;    }&#10;&#10;    fun updateNoteTags(id: String, tags: Set&lt;String&gt;) {&#10;        val normalized = tags.map { it.lowercase() }.filter { AVAILABLE_TAGS.contains(it) }.toSet()&#10;        state.notes.firstOrNull { it.id == id }?.let {&#10;            it.tags = normalized.toMutableSet()&#10;            project.messageBus.syncPublisher(TOPIC).notesChanged()&#10;        }&#10;    }&#10;&#10;    fun updateNoteContent(id: String, content: String) {&#10;        state.notes.firstOrNull { it.id == id }?.let {&#10;            it.content = content.trim()&#10;            project.messageBus.syncPublisher(TOPIC).notesChanged()&#10;        }&#10;    }&#10;&#10;    fun deleteNote(id: String) {&#10;        val noteIndex = state.notes.indexOfFirst { it.id == id }&#10;        if (noteIndex != -1) {&#10;            state.notes.removeAt(noteIndex)&#10;            project.messageBus.syncPublisher(TOPIC).notesChanged()&#10;        }&#10;    }&#10;&#10;    fun addAvailableTag(tag: String): Boolean {&#10;        val normalized = tag.trim().lowercase()&#10;        if (normalized.isNotEmpty() &amp;&amp; !AVAILABLE_TAGS.contains(normalized)) {&#10;            AVAILABLE_TAGS.add(normalized)&#10;            state.availableTags.add(normalized)&#10;            project.messageBus.syncPublisher(TOPIC).notesChanged()&#10;            return true&#10;        }&#10;        return false&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/hmrguez/fastendpointsplugin/notes/NotesToolWindowFactory.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/hmrguez/fastendpointsplugin/notes/NotesToolWindowFactory.kt" />
              <option name="originalContent" value="package hmrguez.fastendpointsplugin.notes&#10;&#10;import com.intellij.openapi.components.service&#10;import com.intellij.openapi.project.DumbAware&#10;import com.intellij.openapi.project.Project&#10;import com.intellij.openapi.ui.Messages&#10;import com.intellij.openapi.wm.ToolWindow&#10;import com.intellij.openapi.wm.ToolWindowFactory&#10;import com.intellij.ui.ToolbarDecorator&#10;import com.intellij.ui.components.JBList&#10;import com.intellij.ui.components.JBScrollPane&#10;import com.intellij.ui.content.ContentFactory&#10;import com.intellij.openapi.Disposable&#10;import com.intellij.openapi.util.Disposer&#10;import com.intellij.openapi.application.ApplicationManager&#10;import java.awt.BorderLayout&#10;import javax.swing.DefaultListCellRenderer&#10;import javax.swing.JList&#10;import javax.swing.JPanel&#10;import javax.swing.ListSelectionModel&#10;&#10;class NotesToolWindowFactory : ToolWindowFactory, DumbAware {&#10;    override fun createToolWindowContent(project: Project, toolWindow: ToolWindow) {&#10;        val notesService = project.service&lt;NotesService&gt;()&#10;&#10;        val listModel = javax.swing.DefaultListModel&lt;NotesService.Note&gt;()&#10;        val list = JBList(listModel)&#10;        list.selectionMode = ListSelectionModel.SINGLE_SELECTION&#10;&#10;        list.cellRenderer = object : DefaultListCellRenderer() {&#10;            override fun getListCellRendererComponent(&#10;                list: JList&lt;*&gt;, value: Any?, index: Int, isSelected: Boolean, cellHasFocus: Boolean&#10;            ): java.awt.Component {&#10;                return if (value is NotesService.Note) {&#10;                    NoteCellPanel(value, isSelected, cellHasFocus)&#10;                } else {&#10;                    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)&#10;                }&#10;            }&#10;        }&#10;&#10;        fun refresh() {&#10;            listModel.removeAllElements()&#10;            notesService.allNotes().forEach { listModel.addElement(it) }&#10;        }&#10;&#10;        val panel = JPanel(BorderLayout())&#10;        val scroll = JBScrollPane(list)&#10;&#10;        fun parseTags(input: String?): Set&lt;String&gt; {&#10;            if (input == null) return emptySet()&#10;            return input.split(',')&#10;                .map { it.trim().lowercase() }&#10;                .filter { it.isNotEmpty() }&#10;                .toSet()&#10;                .filter { NotesService.AVAILABLE_TAGS.contains(it) }&#10;                .toSet()&#10;        }&#10;&#10;&#10;        val decorated = ToolbarDecorator.createDecorator(list)&#10;            .setAddAction {&#10;                val text = Messages.showMultilineInputDialog(&#10;                    project,&#10;                    &quot;Enter your note:&quot;,&#10;                    &quot;New Note&quot;,&#10;                    &quot;&quot;,&#10;                    null,&#10;                    null&#10;                )&#10;                if (text != null) {&#10;                    val trimmed = text.trim()&#10;                    if (trimmed.isNotEmpty()) {&#10;                        notesService.addNote(trimmed)&#10;                        refresh()&#10;                    }&#10;                }&#10;            }&#10;            .setEditAction {&#10;                val selected = list.selectedValue ?: return@setEditAction&#10;                showTagEditDialog(project, selected) { newTags -&gt;&#10;                    notesService.updateNoteTags(selected.id, newTags)&#10;                    refresh()&#10;                }&#10;            }&#10;            .setEditActionUpdater { list.selectedValue != null }&#10;            .setRemoveAction {&#10;                val selected = list.selectedValue ?: return@setRemoveAction&#10;                val result = Messages.showYesNoDialog(&#10;                    project,&#10;                    &quot;Are you sure you want to delete this note?\n\n\&quot;${selected.content.take(100)}${if (selected.content.length &gt; 100) &quot;...&quot; else &quot;&quot;}\&quot;&quot;,&#10;                    &quot;Delete Note&quot;,&#10;                    &quot;Delete&quot;,&#10;                    &quot;Cancel&quot;,&#10;                    Messages.getQuestionIcon()&#10;                )&#10;                if (result == Messages.YES) {&#10;                    notesService.deleteNote(selected.id)&#10;                    refresh()&#10;                }&#10;            }&#10;            .setRemoveActionUpdater { list.selectedValue != null }&#10;            .createPanel()&#10;&#10;        panel.add(decorated, BorderLayout.CENTER)&#10;&#10;        val content = ContentFactory.getInstance().createContent(panel, null, false)&#10;&#10;        // Create a Disposable for this tool window content and subscribe to updates&#10;        val disposable: Disposable = Disposer.newDisposable(&quot;NotesToolWindowDisposable&quot;)&#10;        content.setDisposer(disposable)&#10;        val connection = project.messageBus.connect(disposable)&#10;        connection.subscribe(NotesService.TOPIC, object : NotesService.NotesListener {&#10;            override fun notesChanged() {&#10;                // Ensure UI updates happen on EDT&#10;                ApplicationManager.getApplication().invokeLater { refresh() }&#10;            }&#10;        })&#10;&#10;        toolWindow.contentManager.addContent(content)&#10;&#10;        refresh()&#10;    }&#10;&#10;    override fun shouldBeAvailable(project: Project): Boolean = true&#10;&#10;    private fun showTagEditDialog(project: Project, note: NotesService.Note, onTagsChanged: (Set&lt;String&gt;) -&gt; Unit) {&#10;        val notesService = project.service&lt;NotesService&gt;()&#10;        val tagEditor = TagEditor(&#10;            availableTags = NotesService.AVAILABLE_TAGS.toMutableList(),&#10;            selectedTags = note.tags.toMutableSet(),&#10;            onNewTagCreated = { newTag -&gt;&#10;                // Add the new tag to the global available tags list&#10;                notesService.addAvailableTag(newTag)&#10;            }&#10;        )&#10;&#10;        // Create a text area for editing the note content&#10;        val contentTextArea = javax.swing.JTextArea(note.content).apply {&#10;            rows = 4&#10;            lineWrap = true&#10;            wrapStyleWord = true&#10;            font = com.intellij.util.ui.UIUtil.getLabelFont()&#10;            background = com.intellij.util.ui.UIUtil.getTextFieldBackground()&#10;            foreground = com.intellij.util.ui.UIUtil.getTextFieldForeground()&#10;        }&#10;        val contentScrollPane = com.intellij.ui.components.JBScrollPane(contentTextArea).apply {&#10;            border = javax.swing.BorderFactory.createTitledBorder(&quot;Edit Note Content&quot;)&#10;        }&#10;&#10;        val dialog = object : com.intellij.openapi.ui.DialogWrapper(project) {&#10;            init {&#10;                title = &quot;Edit Note&quot;&#10;                init()&#10;            }&#10;&#10;            override fun createCenterPanel(): javax.swing.JComponent {&#10;                val panel = JPanel(BorderLayout()).apply {&#10;                    // Note content editor at the top&#10;                    add(contentScrollPane, BorderLayout.NORTH)&#10;                    // Tag editor at the bottom&#10;                    add(tagEditor, BorderLayout.CENTER)&#10;                    preferredSize = java.awt.Dimension(500, 350)&#10;                }&#10;                return panel&#10;            }&#10;        }&#10;&#10;        if (dialog.showAndGet()) {&#10;            // Update both content and tags&#10;            val newContent = contentTextArea.text.trim()&#10;            if (newContent != note.content) {&#10;                notesService.updateNoteContent(note.id, newContent)&#10;            }&#10;            onTagsChanged(tagEditor.getSelectedTags())&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package hmrguez.notesplugin.notes&#10;&#10;import com.intellij.openapi.components.service&#10;import com.intellij.openapi.project.DumbAware&#10;import com.intellij.openapi.project.Project&#10;import com.intellij.openapi.ui.Messages&#10;import com.intellij.openapi.wm.ToolWindow&#10;import com.intellij.openapi.wm.ToolWindowFactory&#10;import com.intellij.ui.ToolbarDecorator&#10;import com.intellij.ui.components.JBList&#10;import com.intellij.ui.components.JBScrollPane&#10;import com.intellij.ui.content.ContentFactory&#10;import com.intellij.openapi.Disposable&#10;import com.intellij.openapi.util.Disposer&#10;import com.intellij.openapi.application.ApplicationManager&#10;import java.awt.BorderLayout&#10;import javax.swing.DefaultListCellRenderer&#10;import javax.swing.JList&#10;import javax.swing.JPanel&#10;import javax.swing.ListSelectionModel&#10;&#10;class NotesToolWindowFactory : ToolWindowFactory, DumbAware {&#10;    override fun createToolWindowContent(project: Project, toolWindow: ToolWindow) {&#10;        val notesService = project.service&lt;NotesService&gt;()&#10;&#10;        val listModel = javax.swing.DefaultListModel&lt;NotesService.Note&gt;()&#10;        val list = JBList(listModel)&#10;        list.selectionMode = ListSelectionModel.SINGLE_SELECTION&#10;&#10;        list.cellRenderer = object : DefaultListCellRenderer() {&#10;            override fun getListCellRendererComponent(&#10;                list: JList&lt;*&gt;, value: Any?, index: Int, isSelected: Boolean, cellHasFocus: Boolean&#10;            ): java.awt.Component {&#10;                return if (value is NotesService.Note) {&#10;                    NoteCellPanel(value, isSelected, cellHasFocus)&#10;                } else {&#10;                    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)&#10;                }&#10;            }&#10;        }&#10;&#10;        fun refresh() {&#10;            listModel.removeAllElements()&#10;            notesService.allNotes().forEach { listModel.addElement(it) }&#10;        }&#10;&#10;        val panel = JPanel(BorderLayout())&#10;        val scroll = JBScrollPane(list)&#10;&#10;        fun parseTags(input: String?): Set&lt;String&gt; {&#10;            if (input == null) return emptySet()&#10;            return input.split(',')&#10;                .map { it.trim().lowercase() }&#10;                .filter { it.isNotEmpty() }&#10;                .toSet()&#10;                .filter { NotesService.AVAILABLE_TAGS.contains(it) }&#10;                .toSet()&#10;        }&#10;&#10;&#10;        val decorated = ToolbarDecorator.createDecorator(list)&#10;            .setAddAction {&#10;                val text = Messages.showMultilineInputDialog(&#10;                    project,&#10;                    &quot;Enter your note:&quot;,&#10;                    &quot;New Note&quot;,&#10;                    &quot;&quot;,&#10;                    null,&#10;                    null&#10;                )&#10;                if (text != null) {&#10;                    val trimmed = text.trim()&#10;                    if (trimmed.isNotEmpty()) {&#10;                        notesService.addNote(trimmed)&#10;                        refresh()&#10;                    }&#10;                }&#10;            }&#10;            .setEditAction {&#10;                val selected = list.selectedValue ?: return@setEditAction&#10;                showTagEditDialog(project, selected) { newTags -&gt;&#10;                    notesService.updateNoteTags(selected.id, newTags)&#10;                    refresh()&#10;                }&#10;            }&#10;            .setEditActionUpdater { list.selectedValue != null }&#10;            .setRemoveAction {&#10;                val selected = list.selectedValue ?: return@setRemoveAction&#10;                val result = Messages.showYesNoDialog(&#10;                    project,&#10;                    &quot;Are you sure you want to delete this note?\n\n\&quot;${selected.content.take(100)}${if (selected.content.length &gt; 100) &quot;...&quot; else &quot;&quot;}\&quot;&quot;,&#10;                    &quot;Delete Note&quot;,&#10;                    &quot;Delete&quot;,&#10;                    &quot;Cancel&quot;,&#10;                    Messages.getQuestionIcon()&#10;                )&#10;                if (result == Messages.YES) {&#10;                    notesService.deleteNote(selected.id)&#10;                    refresh()&#10;                }&#10;            }&#10;            .setRemoveActionUpdater { list.selectedValue != null }&#10;            .createPanel()&#10;&#10;        panel.add(decorated, BorderLayout.CENTER)&#10;&#10;        val content = ContentFactory.getInstance().createContent(panel, null, false)&#10;&#10;        // Create a Disposable for this tool window content and subscribe to updates&#10;        val disposable: Disposable = Disposer.newDisposable(&quot;NotesToolWindowDisposable&quot;)&#10;        content.setDisposer(disposable)&#10;        val connection = project.messageBus.connect(disposable)&#10;        connection.subscribe(NotesService.TOPIC, object : NotesService.NotesListener {&#10;            override fun notesChanged() {&#10;                // Ensure UI updates happen on EDT&#10;                ApplicationManager.getApplication().invokeLater { refresh() }&#10;            }&#10;        })&#10;&#10;        toolWindow.contentManager.addContent(content)&#10;&#10;        refresh()&#10;    }&#10;&#10;    override fun shouldBeAvailable(project: Project): Boolean = true&#10;&#10;    private fun showTagEditDialog(project: Project, note: NotesService.Note, onTagsChanged: (Set&lt;String&gt;) -&gt; Unit) {&#10;        val notesService = project.service&lt;NotesService&gt;()&#10;        val tagEditor = TagEditor(&#10;            availableTags = NotesService.AVAILABLE_TAGS.toMutableList(),&#10;            selectedTags = note.tags.toMutableSet(),&#10;            onNewTagCreated = { newTag -&gt;&#10;                // Add the new tag to the global available tags list&#10;                notesService.addAvailableTag(newTag)&#10;            }&#10;        )&#10;&#10;        // Create a text area for editing the note content&#10;        val contentTextArea = javax.swing.JTextArea(note.content).apply {&#10;            rows = 4&#10;            lineWrap = true&#10;            wrapStyleWord = true&#10;            font = com.intellij.util.ui.UIUtil.getLabelFont()&#10;            background = com.intellij.util.ui.UIUtil.getTextFieldBackground()&#10;            foreground = com.intellij.util.ui.UIUtil.getTextFieldForeground()&#10;        }&#10;        val contentScrollPane = com.intellij.ui.components.JBScrollPane(contentTextArea).apply {&#10;            border = javax.swing.BorderFactory.createTitledBorder(&quot;Edit Note Content&quot;)&#10;        }&#10;&#10;        val dialog = object : com.intellij.openapi.ui.DialogWrapper(project) {&#10;            init {&#10;                title = &quot;Edit Note&quot;&#10;                init()&#10;            }&#10;&#10;            override fun createCenterPanel(): javax.swing.JComponent {&#10;                val panel = JPanel(BorderLayout()).apply {&#10;                    // Note content editor at the top&#10;                    add(contentScrollPane, BorderLayout.NORTH)&#10;                    // Tag editor at the bottom&#10;                    add(tagEditor, BorderLayout.CENTER)&#10;                    preferredSize = java.awt.Dimension(500, 350)&#10;                }&#10;                return panel&#10;            }&#10;        }&#10;&#10;        if (dialog.showAndGet()) {&#10;            // Update both content and tags&#10;            val newContent = contentTextArea.text.trim()&#10;            if (newContent != note.content) {&#10;                notesService.updateNoteContent(note.id, newContent)&#10;            }&#10;            onTagsChanged(tagEditor.getSelectedTags())&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/hmrguez/fastendpointsplugin/notes/TagEditor.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/hmrguez/fastendpointsplugin/notes/TagEditor.kt" />
              <option name="originalContent" value="package hmrguez.fastendpointsplugin.notes&#10;&#10;import com.intellij.ui.JBColor&#10;import java.awt.*&#10;import java.awt.event.MouseAdapter&#10;import java.awt.event.MouseEvent&#10;import javax.swing.*&#10;&#10;class TagEditor(&#10;    private val availableTags: MutableList&lt;String&gt;,&#10;    private val selectedTags: MutableSet&lt;String&gt; = mutableSetOf(),&#10;    private val onSelectionChanged: (Set&lt;String&gt;) -&gt; Unit = {},&#10;    private val onNewTagCreated: (String) -&gt; Unit = {}&#10;) : JPanel(BorderLayout()) {&#10;&#10;    private val chipsPanel = JPanel(FlowLayout(FlowLayout.LEFT, 5, 5))&#10;    private val newTagField = com.intellij.ui.components.JBTextField()&#10;    private val addTagButton = JButton(&quot;Add Tag&quot;)&#10;&#10;    init {&#10;        background = com.intellij.util.ui.UIUtil.getPanelBackground()&#10;&#10;        // Setup chips panel&#10;        chipsPanel.background = com.intellij.util.ui.UIUtil.getPanelBackground()&#10;        chipsPanel.border = BorderFactory.createTitledBorder(&quot;Select Tags&quot;)&#10;&#10;        // Setup new tag input panel&#10;        val inputPanel = JPanel(FlowLayout(FlowLayout.LEFT, 5, 5))&#10;        inputPanel.background = com.intellij.util.ui.UIUtil.getPanelBackground()&#10;        inputPanel.border = BorderFactory.createTitledBorder(&quot;Create New Tag&quot;)&#10;&#10;        newTagField.columns = 15&#10;        newTagField.emptyText.text = &quot;Enter new tag name...&quot;&#10;&#10;        addTagButton.addActionListener {&#10;            val newTag = newTagField.text.trim().lowercase()&#10;            if (newTag.isNotEmpty() &amp;&amp; !availableTags.contains(newTag)) {&#10;                availableTags.add(newTag)&#10;                selectedTags.add(newTag)&#10;                newTagField.text = &quot;&quot;&#10;                onNewTagCreated(newTag)&#10;                refreshChips()&#10;            }&#10;        }&#10;&#10;        // Add Enter key support to text field&#10;        newTagField.addActionListener {&#10;            addTagButton.doClick()&#10;        }&#10;&#10;        inputPanel.add(JLabel(&quot;New tag:&quot;))&#10;        inputPanel.add(newTagField)&#10;        inputPanel.add(addTagButton)&#10;&#10;        // Layout the components&#10;        add(chipsPanel, BorderLayout.CENTER)&#10;        add(inputPanel, BorderLayout.SOUTH)&#10;&#10;        refreshChips()&#10;    }&#10;&#10;    fun setSelectedTags(tags: Set&lt;String&gt;) {&#10;        selectedTags.clear()&#10;        selectedTags.addAll(tags.filter { availableTags.contains(it.lowercase()) })&#10;        refreshChips()&#10;    }&#10;&#10;    fun getSelectedTags(): Set&lt;String&gt; = selectedTags.toSet()&#10;&#10;    private fun refreshChips() {&#10;        chipsPanel.removeAll()&#10;&#10;        availableTags.forEach { tag -&gt;&#10;            val isSelected = selectedTags.contains(tag)&#10;            val chip = createSelectableChip(tag, isSelected) { selected -&gt;&#10;                if (selected) {&#10;                    selectedTags.add(tag)&#10;                } else {&#10;                    selectedTags.remove(tag)&#10;                }&#10;                refreshChips()&#10;                onSelectionChanged(selectedTags.toSet())&#10;            }&#10;            chipsPanel.add(chip)&#10;        }&#10;&#10;        chipsPanel.revalidate()&#10;        chipsPanel.repaint()&#10;    }&#10;&#10;    private fun createSelectableChip(tag: String, isSelected: Boolean, onToggle: (Boolean) -&gt; Unit): JComponent {&#10;        return object : JComponent() {&#10;            private var isHovered = false&#10;&#10;            init {&#10;                // Ensure we have a font before getting metrics&#10;                if (font == null) {&#10;                    font = com.intellij.util.ui.UIUtil.getLabelFont()&#10;                }&#10;                val metrics = getFontMetrics(font)&#10;                val width = metrics.stringWidth(tag) + 20&#10;                val height = 24&#10;                preferredSize = Dimension(width, height)&#10;                cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)&#10;&#10;                addMouseListener(object : MouseAdapter() {&#10;                    override fun mouseClicked(e: MouseEvent) {&#10;                        onToggle(!isSelected)&#10;                    }&#10;&#10;                    override fun mouseEntered(e: MouseEvent) {&#10;                        isHovered = true&#10;                        repaint()&#10;                    }&#10;&#10;                    override fun mouseExited(e: MouseEvent) {&#10;                        isHovered = false&#10;                        repaint()&#10;                    }&#10;                })&#10;            }&#10;&#10;            override fun paintComponent(g: Graphics) {&#10;                super.paintComponent(g)&#10;                val g2d = g as Graphics2D&#10;                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)&#10;&#10;                val width = width&#10;                val height = height&#10;&#10;                // Get tag color (similar to NoteCellPanel)&#10;                val baseColor = getTagColor(tag)&#10;&#10;                // Determine background color based on selection and hover state&#10;                val backgroundColor = when {&#10;                    isSelected &amp;&amp; isHovered -&gt; baseColor.darker()&#10;                    isSelected -&gt; baseColor&#10;                    isHovered -&gt; baseColor.brighter().brighter()&#10;                    else -&gt; JBColor.LIGHT_GRAY&#10;                }&#10;&#10;                // Draw chip background&#10;                g2d.color = backgroundColor&#10;                g2d.fillRoundRect(0, 0, width, height, 12, 12)&#10;&#10;                // Draw border&#10;                g2d.color = if (isSelected) baseColor.darker() else JBColor.GRAY&#10;                g2d.drawRoundRect(0, 0, width - 1, height - 1, 12, 12)&#10;&#10;                // Draw text&#10;                val metrics = g2d.fontMetrics&#10;                val textColor = if (isSelected) JBColor.WHITE else JBColor.BLACK&#10;                g2d.color = textColor&#10;                val x = (width - metrics.stringWidth(tag)) / 2&#10;                val y = (height - metrics.height) / 2 + metrics.ascent&#10;                g2d.drawString(tag, x, y)&#10;&#10;                // Draw selection indicator (checkmark or plus)&#10;                if (isSelected) {&#10;                    g2d.color = JBColor.WHITE&#10;                    val checkSize = 8&#10;                    val checkX = width - checkSize - 3&#10;                    val checkY = 3&#10;                    // Simple checkmark&#10;                    g2d.drawLine(checkX, checkY + checkSize/2, checkX + checkSize/3, checkY + 2*checkSize/3)&#10;                    g2d.drawLine(checkX + checkSize/3, checkY + 2*checkSize/3, checkX + checkSize, checkY)&#10;                } else if (isHovered) {&#10;                    g2d.color = JBColor.GRAY&#10;                    val plusSize = 6&#10;                    val plusX = width - plusSize - 4&#10;                    val plusY = height/2 - plusSize/2&#10;                    // Simple plus sign&#10;                    g2d.drawLine(plusX + plusSize/2, plusY, plusX + plusSize/2, plusY + plusSize)&#10;                    g2d.drawLine(plusX, plusY + plusSize/2, plusX + plusSize, plusY + plusSize/2)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getTagColor(tag: String): Color {&#10;        return when (tag.lowercase()) {&#10;            &quot;todo&quot; -&gt; JBColor(Color(0x4CAF50), Color(0x6BC86B))      // Green (light/dark theme)&#10;            &quot;mental&quot; -&gt; JBColor(Color(0x2196F3), Color(0x42A5F5))    // Blue (light/dark theme)&#10;            &quot;giberish&quot; -&gt; JBColor(Color(0xFF9800), Color(0xFFB74D))  // Orange (light/dark theme)&#10;            else -&gt; JBColor.GRAY&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package hmrguez.notesplugin.notes&#10;&#10;import com.intellij.ui.JBColor&#10;import java.awt.*&#10;import java.awt.event.MouseAdapter&#10;import java.awt.event.MouseEvent&#10;import javax.swing.*&#10;&#10;class TagEditor(&#10;    private val availableTags: MutableList&lt;String&gt;,&#10;    private val selectedTags: MutableSet&lt;String&gt; = mutableSetOf(),&#10;    private val onSelectionChanged: (Set&lt;String&gt;) -&gt; Unit = {},&#10;    private val onNewTagCreated: (String) -&gt; Unit = {}&#10;) : JPanel(BorderLayout()) {&#10;&#10;    private val chipsPanel = JPanel(FlowLayout(FlowLayout.LEFT, 5, 5))&#10;    private val newTagField = com.intellij.ui.components.JBTextField()&#10;    private val addTagButton = JButton(&quot;Add Tag&quot;)&#10;&#10;    init {&#10;        background = com.intellij.util.ui.UIUtil.getPanelBackground()&#10;&#10;        // Setup chips panel&#10;        chipsPanel.background = com.intellij.util.ui.UIUtil.getPanelBackground()&#10;        chipsPanel.border = BorderFactory.createTitledBorder(&quot;Select Tags&quot;)&#10;&#10;        // Setup new tag input panel&#10;        val inputPanel = JPanel(FlowLayout(FlowLayout.LEFT, 5, 5))&#10;        inputPanel.background = com.intellij.util.ui.UIUtil.getPanelBackground()&#10;        inputPanel.border = BorderFactory.createTitledBorder(&quot;Create New Tag&quot;)&#10;&#10;        newTagField.columns = 15&#10;        newTagField.emptyText.text = &quot;Enter new tag name...&quot;&#10;&#10;        addTagButton.addActionListener {&#10;            val newTag = newTagField.text.trim().lowercase()&#10;            if (newTag.isNotEmpty() &amp;&amp; !availableTags.contains(newTag)) {&#10;                availableTags.add(newTag)&#10;                selectedTags.add(newTag)&#10;                newTagField.text = &quot;&quot;&#10;                onNewTagCreated(newTag)&#10;                refreshChips()&#10;            }&#10;        }&#10;&#10;        // Add Enter key support to text field&#10;        newTagField.addActionListener {&#10;            addTagButton.doClick()&#10;        }&#10;&#10;        inputPanel.add(JLabel(&quot;New tag:&quot;))&#10;        inputPanel.add(newTagField)&#10;        inputPanel.add(addTagButton)&#10;&#10;        // Layout the components&#10;        add(chipsPanel, BorderLayout.CENTER)&#10;        add(inputPanel, BorderLayout.SOUTH)&#10;&#10;        refreshChips()&#10;    }&#10;&#10;    fun setSelectedTags(tags: Set&lt;String&gt;) {&#10;        selectedTags.clear()&#10;        selectedTags.addAll(tags.filter { availableTags.contains(it.lowercase()) })&#10;        refreshChips()&#10;    }&#10;&#10;    fun getSelectedTags(): Set&lt;String&gt; = selectedTags.toSet()&#10;&#10;    private fun refreshChips() {&#10;        chipsPanel.removeAll()&#10;&#10;        availableTags.forEach { tag -&gt;&#10;            val isSelected = selectedTags.contains(tag)&#10;            val chip = createSelectableChip(tag, isSelected) { selected -&gt;&#10;                if (selected) {&#10;                    selectedTags.add(tag)&#10;                } else {&#10;                    selectedTags.remove(tag)&#10;                }&#10;                refreshChips()&#10;                onSelectionChanged(selectedTags.toSet())&#10;            }&#10;            chipsPanel.add(chip)&#10;        }&#10;&#10;        chipsPanel.revalidate()&#10;        chipsPanel.repaint()&#10;    }&#10;&#10;    private fun createSelectableChip(tag: String, isSelected: Boolean, onToggle: (Boolean) -&gt; Unit): JComponent {&#10;        return object : JComponent() {&#10;            private var isHovered = false&#10;&#10;            init {&#10;                // Ensure we have a font before getting metrics&#10;                if (font == null) {&#10;                    font = com.intellij.util.ui.UIUtil.getLabelFont()&#10;                }&#10;                val metrics = getFontMetrics(font)&#10;                val width = metrics.stringWidth(tag) + 20&#10;                val height = 24&#10;                preferredSize = Dimension(width, height)&#10;                cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)&#10;&#10;                addMouseListener(object : MouseAdapter() {&#10;                    override fun mouseClicked(e: MouseEvent) {&#10;                        onToggle(!isSelected)&#10;                    }&#10;&#10;                    override fun mouseEntered(e: MouseEvent) {&#10;                        isHovered = true&#10;                        repaint()&#10;                    }&#10;&#10;                    override fun mouseExited(e: MouseEvent) {&#10;                        isHovered = false&#10;                        repaint()&#10;                    }&#10;                })&#10;            }&#10;&#10;            override fun paintComponent(g: Graphics) {&#10;                super.paintComponent(g)&#10;                val g2d = g as Graphics2D&#10;                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)&#10;&#10;                val width = width&#10;                val height = height&#10;&#10;                // Get tag color (similar to NoteCellPanel)&#10;                val baseColor = getTagColor(tag)&#10;&#10;                // Determine background color based on selection and hover state&#10;                val backgroundColor = when {&#10;                    isSelected &amp;&amp; isHovered -&gt; baseColor.darker()&#10;                    isSelected -&gt; baseColor&#10;                    isHovered -&gt; baseColor.brighter().brighter()&#10;                    else -&gt; JBColor.LIGHT_GRAY&#10;                }&#10;&#10;                // Draw chip background&#10;                g2d.color = backgroundColor&#10;                g2d.fillRoundRect(0, 0, width, height, 12, 12)&#10;&#10;                // Draw border&#10;                g2d.color = if (isSelected) baseColor.darker() else JBColor.GRAY&#10;                g2d.drawRoundRect(0, 0, width - 1, height - 1, 12, 12)&#10;&#10;                // Draw text&#10;                val metrics = g2d.fontMetrics&#10;                val textColor = if (isSelected) JBColor.WHITE else JBColor.BLACK&#10;                g2d.color = textColor&#10;                val x = (width - metrics.stringWidth(tag)) / 2&#10;                val y = (height - metrics.height) / 2 + metrics.ascent&#10;                g2d.drawString(tag, x, y)&#10;&#10;                // Draw selection indicator (checkmark or plus)&#10;                if (isSelected) {&#10;                    g2d.color = JBColor.WHITE&#10;                    val checkSize = 8&#10;                    val checkX = width - checkSize - 3&#10;                    val checkY = 3&#10;                    // Simple checkmark&#10;                    g2d.drawLine(checkX, checkY + checkSize/2, checkX + checkSize/3, checkY + 2*checkSize/3)&#10;                    g2d.drawLine(checkX + checkSize/3, checkY + 2*checkSize/3, checkX + checkSize, checkY)&#10;                } else if (isHovered) {&#10;                    g2d.color = JBColor.GRAY&#10;                    val plusSize = 6&#10;                    val plusX = width - plusSize - 4&#10;                    val plusY = height/2 - plusSize/2&#10;                    // Simple plus sign&#10;                    g2d.drawLine(plusX + plusSize/2, plusY, plusX + plusSize/2, plusY + plusSize)&#10;                    g2d.drawLine(plusX, plusY + plusSize/2, plusX + plusSize, plusY + plusSize/2)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getTagColor(tag: String): Color {&#10;        return when (tag.lowercase()) {&#10;            &quot;todo&quot; -&gt; JBColor(Color(0x4CAF50), Color(0x6BC86B))      // Green (light/dark theme)&#10;            &quot;mental&quot; -&gt; JBColor(Color(0x2196F3), Color(0x42A5F5))    // Blue (light/dark theme)&#10;            &quot;giberish&quot; -&gt; JBColor(Color(0xFF9800), Color(0xFFB74D))  // Orange (light/dark theme)&#10;            else -&gt; JBColor.GRAY&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/hmrguez/notesplugin/notes/NoteCellPanel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/hmrguez/notesplugin/notes/NoteCellPanel.kt" />
              <option name="originalContent" value="package hmrguez.fastendpointsplugin.notes&#10;&#10;import java.awt.*&#10;import javax.swing.*&#10;import javax.swing.border.EmptyBorder&#10;&#10;class NoteCellPanel(&#10;    private val note: NotesService.Note,&#10;    private val isSelected: Boolean,&#10;    private val hasFocus: Boolean&#10;) : JPanel() {&#10;&#10;    init {&#10;        layout = BorderLayout()&#10;        isOpaque = true&#10;        background = if (isSelected) UIManager.getColor(&quot;List.selectionBackground&quot;) else UIManager.getColor(&quot;List.background&quot;)&#10;&#10;        val contentPanel = JPanel(FlowLayout(FlowLayout.LEFT, 5, 2))&#10;        contentPanel.isOpaque = false&#10;&#10;        // Note content&#10;        val firstLine = note.content.lines().firstOrNull()?.take(80) ?: &quot;(empty)&quot;&#10;        val contentLabel = JLabel(firstLine)&#10;        contentLabel.font = contentLabel.font.deriveFont(Font.BOLD)&#10;        contentLabel.foreground = if (isSelected) UIManager.getColor(&quot;List.selectionForeground&quot;) else UIManager.getColor(&quot;List.foreground&quot;)&#10;        contentPanel.add(contentLabel)&#10;&#10;        // Add tags directly to the same panel&#10;        if (note.tags.isNotEmpty()) {&#10;            val order = NotesService.AVAILABLE_TAGS.withIndex().associate { it.value to it.index }&#10;            val sortedTags = note.tags.sortedWith(compareBy({ order[it] ?: Int.MAX_VALUE }, { it }))&#10;&#10;            sortedTags.forEach { tag -&gt;&#10;                contentPanel.add(createChip(tag))&#10;            }&#10;        }&#10;&#10;        add(contentPanel, BorderLayout.WEST)&#10;        border = if (hasFocus) UIManager.getBorder(&quot;List.focusCellHighlightBorder&quot;) else EmptyBorder(2, 5, 2, 5)&#10;    }&#10;&#10;    private fun createTagsPanel(): JPanel {&#10;        val panel = JPanel(FlowLayout(FlowLayout.LEFT, 2, 0))&#10;        panel.isOpaque = false&#10;&#10;        val order = NotesService.AVAILABLE_TAGS.withIndex().associate { it.value to it.index }&#10;        val sortedTags = note.tags.sortedWith(compareBy({ order[it] ?: Int.MAX_VALUE }, { it }))&#10;&#10;        sortedTags.forEach { tag -&gt;&#10;            panel.add(createChip(tag))&#10;        }&#10;&#10;        return panel&#10;    }&#10;&#10;    private fun createChip(tag: String): JComponent {&#10;        return object : JComponent() {&#10;            override fun getPreferredSize(): Dimension {&#10;                val metrics = getFontMetrics(font ?: UIManager.getFont(&quot;Label.font&quot;))&#10;                val width = metrics.stringWidth(tag) + 16&#10;                val height = metrics.height + 4&#10;                return Dimension(width, height)&#10;            }&#10;&#10;            override fun getMinimumSize(): Dimension = preferredSize&#10;            override fun getMaximumSize(): Dimension = preferredSize&#10;&#10;            override fun paintComponent(g: Graphics) {&#10;                val g2d = g as Graphics2D&#10;                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)&#10;&#10;                val color = getTagColor(tag)&#10;&#10;                // Draw chip background&#10;                g2d.color = color&#10;                g2d.fillRoundRect(0, 0, width, height, height, height)&#10;&#10;                // Draw text&#10;                g2d.color = Color.WHITE&#10;                val metrics = g2d.fontMetrics&#10;                val x = (width - metrics.stringWidth(tag)) / 2&#10;                val y = (height + metrics.ascent - metrics.descent) / 2&#10;                g2d.drawString(tag, x, y)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getTagColor(tag: String): Color {&#10;        return when (tag.lowercase()) {&#10;            &quot;todo&quot; -&gt; Color(9, 105, 218)     // #0969da&#10;            &quot;mental&quot; -&gt; Color(130, 80, 223)   // #8250df&#10;            &quot;giberish&quot; -&gt; Color(154, 103, 0)  // #9a6700&#10;            else -&gt; Color(87, 96, 106)        // #57606a&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package hmrguez.notesplugin.notes&#10;&#10;import java.awt.*&#10;import javax.swing.*&#10;import javax.swing.border.EmptyBorder&#10;&#10;class NoteCellPanel(&#10;    private val note: NotesService.Note,&#10;    private val isSelected: Boolean,&#10;    private val hasFocus: Boolean&#10;) : JPanel() {&#10;&#10;    init {&#10;        layout = BorderLayout()&#10;        isOpaque = true&#10;        background = if (isSelected) UIManager.getColor(&quot;List.selectionBackground&quot;) else UIManager.getColor(&quot;List.background&quot;)&#10;&#10;        val contentPanel = JPanel(FlowLayout(FlowLayout.LEFT, 5, 2))&#10;        contentPanel.isOpaque = false&#10;&#10;        // Note content&#10;        val firstLine = note.content.lines().firstOrNull()?.take(80) ?: &quot;(empty)&quot;&#10;        val contentLabel = JLabel(firstLine)&#10;        contentLabel.font = contentLabel.font.deriveFont(Font.BOLD)&#10;        contentLabel.foreground = if (isSelected) UIManager.getColor(&quot;List.selectionForeground&quot;) else UIManager.getColor(&quot;List.foreground&quot;)&#10;        contentPanel.add(contentLabel)&#10;&#10;        // Add tags directly to the same panel&#10;        if (note.tags.isNotEmpty()) {&#10;            val order = NotesService.AVAILABLE_TAGS.withIndex().associate { it.value to it.index }&#10;            val sortedTags = note.tags.sortedWith(compareBy({ order[it] ?: Int.MAX_VALUE }, { it }))&#10;&#10;            sortedTags.forEach { tag -&gt;&#10;                contentPanel.add(createChip(tag))&#10;            }&#10;        }&#10;&#10;        add(contentPanel, BorderLayout.WEST)&#10;        border = if (hasFocus) UIManager.getBorder(&quot;List.focusCellHighlightBorder&quot;) else EmptyBorder(2, 5, 2, 5)&#10;    }&#10;&#10;    private fun createTagsPanel(): JPanel {&#10;        val panel = JPanel(FlowLayout(FlowLayout.LEFT, 2, 0))&#10;        panel.isOpaque = false&#10;&#10;        val order = NotesService.AVAILABLE_TAGS.withIndex().associate { it.value to it.index }&#10;        val sortedTags = note.tags.sortedWith(compareBy({ order[it] ?: Int.MAX_VALUE }, { it }))&#10;&#10;        sortedTags.forEach { tag -&gt;&#10;            panel.add(createChip(tag))&#10;        }&#10;&#10;        return panel&#10;    }&#10;&#10;    private fun createChip(tag: String): JComponent {&#10;        return object : JComponent() {&#10;            override fun getPreferredSize(): Dimension {&#10;                val metrics = getFontMetrics(font ?: UIManager.getFont(&quot;Label.font&quot;))&#10;                val width = metrics.stringWidth(tag) + 16&#10;                val height = metrics.height + 4&#10;                return Dimension(width, height)&#10;            }&#10;&#10;            override fun getMinimumSize(): Dimension = preferredSize&#10;            override fun getMaximumSize(): Dimension = preferredSize&#10;&#10;            override fun paintComponent(g: Graphics) {&#10;                val g2d = g as Graphics2D&#10;                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)&#10;&#10;                val color = getTagColor(tag)&#10;&#10;                // Draw chip background&#10;                g2d.color = color&#10;                g2d.fillRoundRect(0, 0, width, height, height, height)&#10;&#10;                // Draw text&#10;                g2d.color = Color.WHITE&#10;                val metrics = g2d.fontMetrics&#10;                val x = (width - metrics.stringWidth(tag)) / 2&#10;                val y = (height + metrics.ascent - metrics.descent) / 2&#10;                g2d.drawString(tag, x, y)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getTagColor(tag: String): Color {&#10;        return when (tag.lowercase()) {&#10;            &quot;todo&quot; -&gt; Color(9, 105, 218)     // #0969da&#10;            &quot;mental&quot; -&gt; Color(130, 80, 223)   // #8250df&#10;            &quot;giberish&quot; -&gt; Color(154, 103, 0)  // #9a6700&#10;            else -&gt; Color(87, 96, 106)        // #57606a&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/META-INF/plugin.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/META-INF/plugin.xml" />
              <option name="originalContent" value="&lt;!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html --&gt;&#10;&lt;idea-plugin&gt;&#10;    &lt;!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. --&gt;&#10;    &lt;id&gt;hmrguez.fastendpointsplugin&lt;/id&gt;&#10;&#10;    &lt;!-- Public plugin name should be written in Title Case. --&gt;&#10;    &lt;name&gt;Notes&lt;/name&gt;&#10;&#10;    &lt;!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. --&gt;&#10;    &lt;vendor url=&quot;https://github.com/hmrguez&quot;&gt;hmrguez&lt;/vendor&gt;&#10;&#10;    &lt;!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager. --&gt;&#10;    &lt;description&gt;&lt;![CDATA[&#10;        Simple Notes plugin: a dedicated sidebar tool window listing your notes with a + button to add new ones.&#10;    ]]&gt;&lt;/description&gt;&#10;&#10;    &lt;!-- Product and plugin compatibility requirements. --&gt;&#10;    &lt;depends&gt;com.intellij.modules.platform&lt;/depends&gt;&#10;    &lt;depends&gt;com.intellij.modules.rider&lt;/depends&gt;&#10;&#10;    &lt;!-- Extension points defined by the plugin. --&gt;&#10;    &lt;extensions defaultExtensionNs=&quot;com.intellij&quot;&gt;&#10;        &lt;toolWindow id=&quot;Notes&quot; anchor=&quot;left&quot; factoryClass=&quot;hmrguez.fastendpointsplugin.notes.NotesToolWindowFactory&quot;/&gt;&#10;    &lt;/extensions&gt;&#10;&#10;    &lt;actions&gt;&#10;        &lt;action id=&quot;hmrguez.fastendpointsplugin.actions.CreateNote&quot;&#10;                class=&quot;hmrguez.fastendpointsplugin.notes.CreateNoteAction&quot;&#10;                text=&quot;Create Note&quot;&#10;                description=&quot;Create a new note&quot;&gt;&#10;            &lt;add-to-group group-id=&quot;ToolsMenu&quot; anchor=&quot;last&quot;/&gt;&#10;        &lt;/action&gt;&#10;    &lt;/actions&gt;&#10;&lt;/idea-plugin&gt;" />
              <option name="updatedContent" value="&lt;!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html --&gt;&#10;&lt;idea-plugin&gt;&#10;    &lt;!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. --&gt;&#10;    &lt;id&gt;hmrguez.notesplugin&lt;/id&gt;&#10;&#10;    &lt;!-- Public plugin name should be written in Title Case. --&gt;&#10;    &lt;name&gt;Notes&lt;/name&gt;&#10;&#10;    &lt;!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. --&gt;&#10;    &lt;vendor url=&quot;https://github.com/hmrguez&quot;&gt;hmrguez&lt;/vendor&gt;&#10;&#10;    &lt;!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager. --&gt;&#10;    &lt;description&gt;&lt;![CDATA[&#10;        Simple Notes plugin: a dedicated sidebar tool window listing your notes with a + button to add new ones.&#10;    ]]&gt;&lt;/description&gt;&#10;&#10;    &lt;!-- Product and plugin compatibility requirements. --&gt;&#10;    &lt;depends&gt;com.intellij.modules.platform&lt;/depends&gt;&#10;    &lt;depends&gt;com.intellij.modules.rider&lt;/depends&gt;&#10;&#10;    &lt;!-- Extension points defined by the plugin. --&gt;&#10;    &lt;extensions defaultExtensionNs=&quot;com.intellij&quot;&gt;&#10;        &lt;toolWindow id=&quot;Notes&quot; anchor=&quot;left&quot; factoryClass=&quot;hmrguez.notesplugin.notes.NotesToolWindowFactory&quot;/&gt;&#10;    &lt;/extensions&gt;&#10;&#10;    &lt;actions&gt;&#10;        &lt;action id=&quot;hmrguez.notesplugin.actions.CreateNote&quot;&#10;                class=&quot;hmrguez.notesplugin.notes.CreateNoteAction&quot;&#10;                text=&quot;Create Note&quot;&#10;                description=&quot;Create a new note&quot;&gt;&#10;            &lt;add-to-group group-id=&quot;ToolsMenu&quot; anchor=&quot;last&quot;/&gt;&#10;        &lt;/action&gt;&#10;    &lt;/actions&gt;&#10;&lt;/idea-plugin&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>